  # print("I am running")
    # news_count = NewsDB.objects.count()
    url = 'https://hacker-news.firebaseio.com/v0/newstories.json?print=pretty'
 
 # if news_count == 0: 
    #     empt = []
    #     # news_db = NewsDB.objects.get_or_create()
    #     response = requests.get(url)
    #     data = response.json()[:10]
    #     for datas in range(len(data)-1):
    #         empt.append(data[datas])
        
    #     urlreal = 'https://hacker-news.firebaseio.com/v0/item/{}.json?print=pretty'
    #     for fix in range(5):
    #         get_comp_url = urlreal.format(empt[fix])
    #         req_json = requests.get(get_comp_url).json()
            
    #         set_time = datetime.fromtimestamp(req_json['time'])
            
    #         NewsDB.objects.create(
    #             by=req_json['by'],
    #             id=int(req_json['id']),
    #             score=int(req_json['score']),
    #             time=set_time,
    #             title=req_json['title'],
    #             url=req_json['url'] 
    #         )
            
        # else:
    # now = datetime.now()
    # five_minutes_ago = now + datetime.timedelta(minutes=-5)
    
    empt = []
    urlList = []
    # news_db = NewsDB.objects.get_or_create()
    response = requests.get(url)
    data = response.json()[:10]
    for datas in range(len(data)-1):
        empt.append(data[datas])
    
    urlreal = 'https://hacker-news.firebaseio.com/v0/item/{}.json?print=pretty'
    for fix in range(len(data)):
        get_comp_url = urlreal.format(empt[fix])
        # req_json = requests.get(get_comp_url).json()
        urlList.append(get_comp_url)
        print(urlList)
        # set_time = datetime.fromtimestamp(req_json['time'])
        # if five_minutes_ago > set_time:
        #     return
        
        # NewsDB.objects.create(
        #     by=req_json['by'],
        #     id=int(req_json['id']),
        #     score=int(req_json['score']),
        #     time=set_time,
        #     title=req_json['title'],
        #     url=req_json['url'] 
        # )
        context ={'urlList': urlList}
        
        return render(request, 'news_api/home.html', context)
    # context        
     

# def get_news(request):
#     news_db = NewsDB.objects.all()
    
#     print(NewsDB.objects.count())
#     context = {'urlList': news_db}
#     return render(request, 'news_api/home.html', context)







.news-container {
    background-color:azure;
    height: 50%;
}

.next-previous-but{
    background-color: #fff;
}

.nav-prop{
    background-color: #fff;
        display: block;   
        /* margin-right: 3%;    */
        margin-left: 40%;
        /* margin-right: auto; */
        /* width: 8em */
    
}

.search-form{
    margin-left: 65%;
}

.shift{
    margin-top: 20%;
}




 <form class="form-control" method = "POST" action=" ">
                {% csrf_token %}
                {{ form|crispy }}
                <input type="submit" value="Submit" />
            </form>  